/*
 * Analyseur syntaxique
 *
 */ 
package fr.ul.miage.projet.generated;
import java_cup.runtime.Symbol;
import fr.ul.miage.projet.*;
import java.util.*;

/* contrôle des erreurs de syntaxe : surcharge */
parser code {:
	public void syntax_error(Symbol cur_token){}
	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		throw new Exception("Erreur");
	}
	public void afficherArbreFinal() {
		System.out.println("----- Affichage de l'arbre final -----");
		action_obj.arbre.afficherArbre();
		System.out.println("--------------------------------------\n");
		System.out.println("----- Affichage de la TDS finale -----");
		System.out.println(action_obj.tds);
		System.out.println("--------------------------------------");
	}
:}
 
/*action code*/
action code {:
	Arbre arbre = new Arbre();
	TableDesSymboles tds = new TableDesSymboles();
:}

/* la grammaire */

terminal String IDF;
terminal EGAL;
terminal VIRGULE;
terminal POINTVIRGULE;
terminal String NOMBRE;
terminal INT;
terminal VOID;
terminal PG;
terminal PD;
terminal AG;
terminal AD;
terminal PLUS;
terminal MOINS;
terminal FOIS;
terminal DIVISE;
terminal RET;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal PPQ;
terminal PPE;
terminal PGQ;
terminal PGE;
terminal VRAI;
terminal FAUX;

non terminal x;
non terminal prog;
non terminal String type;
non terminal String typeFonction;
non terminal ArrayList<Noeud> datas;
non terminal Noeud data;
non terminal ArrayList<Noeud> contenudata;
non terminal ArrayList<Noeud> suiteContenudata;
non terminal Noeud declaration;
non terminal ArrayList<Noeud> codes;
non terminal Noeud fonction;
non terminal ArrayList<Noeud> parametres;
non terminal ArrayList<Noeud> suiteParametres;
non terminal ArrayList<Noeud> parametresCall;
non terminal ArrayList<Noeud> suiteParametresCall;
non terminal Noeud argument;
non terminal Noeud block;
non terminal ArrayList<Noeud> contenuBlock;
non terminal Noeud instruction;
non terminal Noeud affectation;
non terminal Noeud expression;
non terminal Noeud facteur;
non terminal Noeud exprBooleen;
non terminal Noeud valeur;
non terminal Noeud call;
non terminal Noeud instrReturn;
non terminal String op_prioritaire;
non terminal String op_secondaire;
non terminal String operateurBooleen;
non terminal Noeud condition;
non terminal Noeud booleen;
non terminal Noeud iteration;

precedence left INT;

start with x;

/*------debut-------*/


x ::= prog												{: :}
	;

prog ::= datas codes:cs									{: Noeud n = new Noeud(Noeud.PROG);		/* On crée un noeud de départ */
														   arbre.setRacine(n);
														   Noeud codes = new Noeud(Noeud.CODES);
														   //System.out.print("CS: ");
														   codes.ajouterNoeud(cs);
														   //System.out.println(cs);
														   //System.out.println(codes);
														   n.ajouterFG(codes);
														   //System.out.println(n);
														   RESULT = n; :} 
	   ;

datas ::= data:d datas:ds 								{: ds.add(0,d);
														   RESULT = ds; :}
		| /* VIDE */									{: RESULT = new ArrayList<Noeud>(); :}
		;

data ::= type:t contenudata:cd POINTVIRGULE 			{: System.out.println("toto");
														   Noeud n = new Noeud(t, Noeud.DATA);
										  				   n.ajouterNoeud(cd);
										  				   System.out.println(cd);
										 			 	   RESULT = n; :}
	   ;

contenudata ::= declaration:d suiteContenudata:scd		{: scd.add(0,d); 
														   RESULT = scd; :}
			  ;
			
suiteContenudata ::= VIRGULE declaration:d suiteContenudata:scd	{: scd.add(0,d);
															   	   RESULT = scd; :}
				   | /* VIDE */									{: RESULT = new ArrayList<Noeud>(); :}
				   ;

declaration ::= IDF:idf 								{: Noeud n = new Noeud(Noeud.DECLARATION);
														   Noeud nIDF = new Noeud(Noeud.IDF, "[" + tds.scopeCourant + "] " + idf);
														   n.ajouterFG(nIDF);
														   tds.insertion(idf,tds.scopeCourant,"type","null");
														   RESULT = n; :}
			  | IDF:idf EGAL NOMBRE:nb					{: Noeud n = new Noeud(Noeud.DECLARATIONAFFECTATION);
														   Noeud nIDF = new Noeud(Noeud.IDF, "[" + tds.scopeCourant + "] " + idf);
														   n.ajouterFG(nIDF);
														   n.ajouterFD(new Noeud(Noeud.NOMBRE, "<C> "+nb));
														   tds.insertion(idf,tds.scopeCourant,"type",nb);
														   RESULT = n; :}
			  ;
		
codes ::= fonction:fct codes:cs  						{: cs.add(0,fct);
														   //System.out.println(cs);
									   		 		   	   RESULT = cs; :}
		| /* VIDE */									{: RESULT = new ArrayList<Noeud>(); :}
		; 
	
fonction ::= typeFonction:t IDF:idf {: tds.insertion(idf,tds.scopeCourant,t);:}

 PG parametres:p PD block:b {: Noeud n = new Noeud(Noeud.IDF, "[" + tds.scopeCourant + "] <FCT> " + idf);
																Noeud nParam = new Noeud(Noeud.PARAMETRES);
																nParam.ajouterNoeud(p);
																n.ajouterFG(nParam);
																n.ajouterFD(b);
																String typeParams[] = {""};
																String nomParams[] = {""};
																tds.setArg_Loc(idf);
																RESULT = n; :}
		   | IDF:idf PG parametres:p PD block:b			{:	Noeud n = new Noeud(Noeud.IDF, "[" + tds.scopeCourant + "] " + idf);
		   				 									//fonction à inserer dans tds
															Noeud nParam = new Noeud(Noeud.PARAMETRES);
															nParam.ajouterNoeud(p);
															n.ajouterFG(nParam);
															n.ajouterFD(b);
															String typeParams[] = {""};
															String nomParams[] = {""};
															tds.insertion(idf,tds.scopeCourant,"void",typeParams,nomParams);
															RESULT = n; :}
		   ;

typeFonction ::= INT									{: RESULT = "int"; :}
			   | VOID									{: RESULT = "void"; :}
			   ;

block ::= AG contenuBlock:cb AD							{:	
															Noeud n = new Noeud(Noeud.BLOCK);
															n.ajouterNoeud(cb);
															RESULT = n; :} 
		;

contenuBlock ::= contenuBlock:cb instruction:i			{: //System.out.println(i);
														   cb.add(0,i);
														   RESULT = cb; :}
			   | /* VIDE */ 							{: RESULT = new ArrayList<Noeud>(); :}
			   ;

instruction ::= affectation:af							{: RESULT = af; :}
			  | data:da									{: RESULT = da; :}
			  | instrReturn:re							{: RESULT = re; :}
			  | call:ca									{: RESULT = ca; :}
			  | condition:co							{: RESULT = co; :}
			  | iteration:it							{: RESULT = it; :}
			  ;

condition ::= IF PG booleen:bool PD block:b1				{:	Noeud n = new Noeud(Noeud.IF);
																n.ajouterFG(bool);
																n.ajouterFD(b1);
																RESULT = n; :}
			| IF PG booleen:bool PD block:b1 ELSE block:b2	{:	Noeud n = new Noeud(Noeud.IF);
																n.ajouterFG(bool);
																n.ajouterFD(b1);
																n.ajouterFD(b2);
																RESULT = n; :}
			;

iteration ::= WHILE PG booleen:bool PD block:b			{:	Noeud n = new Noeud(Noeud.WHILE);
															n.ajouterFG(bool);
															n.ajouterFD(b);
															RESULT = n; :}
			;

booleen ::= VRAI										{: RESULT = new Noeud(Noeud.VRAI); :}
		  | FAUX										{: RESULT = new Noeud(Noeud.FAUX); :}
		  | exprBooleen:e								{: RESULT = e; :}
		  ;

exprBooleen ::= valeur:v operateurBooleen:opb exprBooleen:e	{: Noeud n = new Noeud(opb);
														   	   n.ajouterFG(v);
														   	   n.ajouterFD(e);
														   	   RESULT = n; :}
			  | valeur:v									{: RESULT = v; :}
			  ;

instrReturn ::= RET expression POINTVIRGULE
			  | RET POINTVIRGULE
			  ;

affectation ::= IDF:idf EGAL expression:e POINTVIRGULE	{: Noeud n = new Noeud(Noeud.AFFECTATION);
														   Noeud nIDF = new Noeud(Noeud.IDF, "[" + tds.scopeCourant + "] <VAR> " + idf);
														   //insertion à faire
														   n.ajouterFG(nIDF);
														   n.ajouterFD(e);
														   tds.insertion(idf,tds.scopeCourant,e);
														   RESULT = n; :}
			  ;

expression ::= expression:e op_secondaire:op2 facteur:f	{: Noeud n = new Noeud(op2);
														   n.ajouterFG(e);
														   n.ajouterFD(f);
														   RESULT = n; :}
			 | facteur:f								{: RESULT = f; :}
			 ;
			
facteur ::= facteur:f op_prioritaire:op1 valeur:v		{: Noeud n = new Noeud(op1);
														   n.ajouterFG(f);
														   n.ajouterFD(v);
														   RESULT = n; :}
		  | valeur:v									{: RESULT = v; :}
		  ;
		
valeur ::= NOMBRE:nb									{: RESULT = new Noeud(Noeud.NOMBRE, "<CST> "+nb); :}
		 | IDF:idf										{: //Vérifier ici que la variable existe
		 												   RESULT = new Noeud(Noeud.IDF, "[" + tds.scopeCourant + "] <VAR> " + idf); :}
		 | PG expression:e PD							{: RESULT = e; :}
		 | call:c										{: RESULT = c; :}
		 ;

call ::= IDF:idf PG parametresCall:pc PD				{: //Vérifier ici que la fonction appelée existe
														   Noeud n = new Noeud(Noeud.CALL, "[" + tds.scopeCourant + "] <APL> " + idf);
														   n.ajouterNoeud(pc);
														   RESULT = n; :} 
	   ;

parametres ::= argument:a suiteParametres:sp			{: sp.add(0,a);
														   tds.scopeCourant++;
														   RESULT = sp; :}
			 | /* VIDE */								{: RESULT = new ArrayList<Noeud>(); :}
			 ;
			
suiteParametres ::= VIRGULE argument:a suiteParametres:sp {: sp.add(0,a);
															 RESULT = sp; :}
				  | /* VIDE */							  {: RESULT = new ArrayList<Noeud>(); :}
				  ;

parametresCall ::= expression:e suiteParametresCall:spc {: spc.add(0,e);
														   RESULT = spc; :}
				 | /* VIDE */							{: RESULT = new ArrayList<Noeud>(); :}
				 ;

suiteParametresCall ::= VIRGULE expression:e suiteParametresCall:spc {: spc.add(0,e);
														   				RESULT = spc; :}
				 	  | /* VIDE */						{: RESULT = new ArrayList<Noeud>(); :}
					  ;

argument ::= type:t IDF:idf								{: Noeud n = new Noeud(Noeud.IDF, "[" + tds.scopeCourant + "] " + idf); 
														   RESULT = n; 
														   tds.insertion(idf,tds.scopeCourant,t,"null",tds.rang_arg++);:} 
		   | call:c										{: RESULT = c; :}
		   ;
			
type ::= INT											{: RESULT = "int"; :}
	   ;

op_secondaire ::= PLUS									{: RESULT = Noeud.PLUS; :}
				| MOINS									{: RESULT = Noeud.MOINS; :}
				;
			
op_prioritaire ::= FOIS									{: RESULT = Noeud.FOIS; :}
				 | DIVISE								{: RESULT = Noeud.DIVISE; :}
				 ;

operateurBooleen ::= PPQ								{: RESULT = Noeud.PPQ; :}
				   | PPE								{: RESULT = Noeud.PPE; :}
				   | PGQ								{: RESULT = Noeud.PGQ; :}
				   | PGE								{: RESULT = Noeud.PGE; :}
				   ;

/*------fin--------*/

