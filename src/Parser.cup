/*
 * Analyseur syntaxique
 *
 */ 
package fr.ul.miage.projet.generated;
import java_cup.runtime.Symbol;

/* contr√¥le des erreurs de syntaxe : surcharge */
parser code {:
	public void syntax_error(Symbol cur_token){}
	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		throw new Exception("Erreur");
	}
:}

/*action code*/
action code {:
	
:}

/* la grammaire */

terminal IDF, EGAL, VIRGULE, POINTVIRGULE, NOMBRE;
terminal INT, VOID;
terminal PG, PD, AG, AD;
terminal PLUS, MOINS, FOIS, DIVISE;
terminal RET;

non terminal x;
non terminal prog, type, datas, data, contenudata, declaration;
non terminal codes, fonction, argument, block, contenuBlock;
non terminal instruction, affectation, expression, valeur, operateur, call, instrReturn;


start with x;

/*------debut-------*/


x ::= prog
		;

prog ::= datas | datas codes | codes
		;

datas ::= data | datas data
		;

data ::= type contenudata POINTVIRGULE
		;

contenudata ::= declaration | contenudata VIRGULE declaration
			;

declaration ::= IDF | IDF EGAL NOMBRE
			;
		
codes ::= fonction | codes fonction
		; 
	
fonction ::= type IDF PG argument PD block | IDF PG argument PD block
			;

block ::= AG contenuBlock AD
		| AG AD
		;

contenuBlock ::= instruction 
				| contenuBlock instruction
				;

instruction ::= affectation 
			| data
			| instrReturn
			| call
			;

instrReturn ::= RET expression POINTVIRGULE
			| RET POINTVIRGULE
			;

affectation ::= IDF EGAL expression POINTVIRGULE
			;

valeur ::= NOMBRE	
		| IDF
		| call
		;

call ::= IDF PG argument PD
		;

expression ::= valeur
			| valeur operateur expression
			| PG valeur operateur expression PD
			| PG valeur operateur expression PD operateur expression
			;


argument ::= type IDF 
			| /* EMPTY */
			;
			
type ::= INT
		| VOID
		;

operateur ::= PLUS
			| MOINS
			| FOIS
			| DIVISE
			;

/*------fin--------*/

